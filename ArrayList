Just like StringBuilder() ArrayList can change size at runtime as needed. Like arrays, ArrayList is an ordered sequence that
allows duplicates.

Tip:
The method Arrays.sort(); needs an import to use it. 
		 // Use either 
     // import java.util.*; or
		 // import java.util.ArrayList;

As with StringBuilder, there are three ways to create an ArrayList:
ArrayList list1 = new ArrayList();
ArrayList list2 = new ArrayList(10);
ArrayList list3 = new ArrayList(list2);

Some variants of creating ArrayList since Java 5 introduced generics, which allow you to specify the type
of class that the ArrayList will contain:
ArrayList<String> list4 = new ArrayList<String>();
ArrayList<String> list5 = new ArrayList<>();

In the meantime, you can store an ArrayList in a List reference variable but not vice versa. 
The reason is that List is an interface and interfaces canâ€™t be instantiated.
List<String> list6 = new ArrayList<>();
ArrayList<String> list7 = new List<>(); // DOES NOT COMPILE

ArrayList Methods:
add(), remove(), set(), isEmpty(), size(), clear(), contains(), equals()

1. add()

The method signatures are as follows:
boolean add(E element)
void add(int index, E element)

If you don't indicate a ArrayList type, the E element is there to indicate it's a class that it contains arrays.

Examples:

ArrayList list = new ArrayList();
list.add("hawk"); // [hawk]
list.add(Boolean.TRUE); // [hawk, true]
System.out.println(list); // [hawk, true]

ArrayList<String> list5 = new ArrayList<>();
list5.add("Sparrow");
list5.add(Boolean.TRUE); // DOES NOT COMPILE

2. remove()
remove() will take parameter that is index of List or ArrayList, and remove the designated index and 
move each element on the right to the left.

For example,
List<String> numbers = new ArrayList<>();
numbers.add(1);
numbers.add(2);
numbers.remove(1); // this will remove index 1 which is 2. so it will print 1.
if you want to use remove() parameter as elements, you have to force in a wrapper class like this : remove(new Integer(1)); 
												    // NOTE THAT THIS METHOD IS DEPRECATED SINCE JAVA 1.9
3. set()
4. isEmpty(), size()
5. clear()
6. contains()
7. equals()

