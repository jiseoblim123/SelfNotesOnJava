Wrapper Class is used when you are putting primitives in a its class.

primitive type : Wrapper Class || Example of Wrapper Class use

boolean : Boolean || new Boolean(true)
byte : Byte || new Byte((byte) 1)
short : Short || new Short((short) 1)
int : Integer || new Integer(1)
long : Long || new Long(1)
float : Float || new Flaot(1.0)
double : Double || new Double(1.0)
char : Character || new Character('a')

Important methods in wrapper classes:
Integer.parseInt("123"); // converts a String to an int primitive.
Integer.valueOf("123"); // converts a String to an Integer wrapper class.

Wrapper class Converting String to primitive    Converting String to wrapper class

Boolean       Boolean.parseBoolean("true");     Boolean.valueOf("TRUE");
Byte          Byte.parseByte("1");              Byte.valueOf("2");
Short         Short.parseShort("1");            Short.valueOf("2");
Integer       Integer.parseInt("1");            Integer.valueOf("2");
Long          Long.parseLong("1");              Long.valueOf("2");
Float         Float.parseFloat("1");            Float.valueOf("2.2");
Double        Double.parseDouble("1");          Double.valueOf("2.2");
Character     None                              None

/** Clipped from book */ 
Autoboxing
Why won’t you need to be concerned with whether a primitive or wrapper class is returned,
you ask? Since Java 5, you can just type the primitive value and Java will convert it to the
relevant wrapper class for you. This is called autoboxing. Let’s look at an example:
4: List<Double> weights = new ArrayList<>();
5: weights.add(50.5); // [50.5]
6: weights.add(new Double(60)); // [50.5, 60.0]
7: weights.remove(50.5); // [60.0]
8: double first = weights.get(0); // 60.0
Line 5 autoboxes the double primitive into a Double object and adds that to the List.
Line 6 shows that you can still write code the long way and pass in a wrapper object. Line
7 again autoboxes into the wrapper object and passes it to remove(). Line 8 retrieves the
Double and unboxes it into a double primitive.
